#!/bin/sh

#
# quick release script base on name of the script [sync, patch, minor, major]

set -eu

cd "$(git rev-parse --show-toplevel)"

die() { >&2 printf '%b\n' "\033[1;31mâœ˜\033[0m ${script}: $*"; exit 1; }


sync() {
  ! is_diverged || die "Diverged from upstream"
  commit "$@"
  git status | grep -q "is up to date" || push
}

commit() { test -z "$(git status -uno --porcelain)" || { git add -A; git commit --quiet -m "$(title "$@")"; }; }
current_remote() { gh api "repos/$(owner_name)/tags" --jq .[0].name 2>/dev/null || echo "v0.0.0"; }
fetch() { git remote update >/dev/null; }
hash_base() { fetch && git merge-base @ "@{u}"; }
hash_local() { fetch && git rev-parse @; }
hash_remote() { fetch && git rev-parse "@{u}"; }
is_ahead() { [ "$(hash_remote)" = "$(hash_base)" ]; }  # need to push
is_behind() { [ "$(hash_local)" = "$(hash_base)" ]; }  # need to pull
is_bump() { is_publish && [ "${current}" != "${next}" ]; }
is_clean() { test -z "$(git status -uno --porcelain)"; }
is_diverged() { is_ahead && is_behind ; }  # need to pull
is_publish() { [ "${script}" != "push" ]; }
is_python() { [ -f setup.cfg ]; }
is_uptodate() { [ "$(hash_local)" = "$(hash_remote)" ]; }
owner_name() { gh repo view --json nameWithOwner --jq .nameWithOwner;}
pull() { git pull --quiet --tags; }
push() { git push --quiet "$@"; }


title() {
  if [ ! "${title-}" ]; then
    suffix="${next}"
    case "${script}" in
      patch) title=fix ;;
      minor) title=feat ;;
      major) title="feat!" ;;
      *) title=auto; suffix="$(git diff --name-status -r | awk '{print $2}' | tr '\n' ' ')" ;;
    esac
    title="${title}: ${1:-${suffix}}"
  fi
  echo "${title}"
}

venv() {
  is_python || return 0
  test -f ./venv/bin/activate || python3 -m venv venv
  grep -q '.pyenv' ./venv/bin/activate || echo 'eval $$\(pyenv init --path)' >> ./venv/bin/activate
  . ./venv/bin/activate
}

main() {
  current="$(svu current)"
  script="${0##*/}"
  next="$(svu next)"

  sync "$@"
}

main "$@"

make tests


current="$(svu)"
next="$(svu next)"
[ "${current}" != "${next}" ] || exit 0

main "$@"
